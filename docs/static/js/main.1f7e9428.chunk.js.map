{"version":3,"sources":["VideoFooter.js","VideoSidebar.js","Video.js","App.js","serviceWorker.js","index.js"],"names":["VideoFooter","channel","description","song","className","mode","index","src","VideoSidebar","likes","shares","messages","useState","liked","setLiked","fontSize","onClick","e","Video","url","playing","setPlaying","videoRef","useRef","current","pause","play","loop","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mVA6BeA,MAzBf,YAAoD,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,YAAaC,EAAO,EAAPA,KACxC,OACI,yBAAKC,UAAU,eACX,yBAAKA,UAAU,qBACX,gCAAMH,GACN,2BAAIC,GACJ,yBAAKE,UAAU,uBACX,kBAAC,IAAD,CAAeA,UAAU,sBACzB,kBAAC,IAAD,CAAQC,KAAK,WACR,cAAEC,MAAF,OACG,oCACI,2BAAIH,SAMxB,yBACIC,UAAU,sBACVG,IAAI,2D,4ECWLC,MA5Bf,YAAkD,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,SAAW,EACnBC,oBAAS,GADU,mBACtCC,EADsC,KAC/BC,EAD+B,KAE7C,OACI,yBAAKV,UAAU,gBACX,yBAAKA,UAAU,wBACVS,EACA,kBAAC,IAAD,CACGE,SAAS,QACTC,QAAS,SAACC,GAAD,OAAKH,GAAS,MAE1B,kBAAC,IAAD,CACGC,SAAS,QACTC,QAAS,SAACC,GAAD,OAAKH,GAAS,MAE3B,2BAAID,EAAOJ,EAAQ,EAAKA,IAE5B,yBAAKL,UAAU,wBACX,kBAAC,IAAD,CAAaW,SAAS,UACtB,2BAAIJ,IAER,yBAAKP,UAAU,wBACX,kBAAC,IAAD,CAAWW,SAAS,UACpB,2BAAIL,MCGLQ,MA3Bf,YAA4E,IAA5DC,EAA2D,EAA3DA,IAAKlB,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,KAAMM,EAA0B,EAA1BA,MAAOE,EAAmB,EAAnBA,SAAUD,EAAS,EAATA,OAAS,EACzCE,oBAAS,GADgC,mBAChEQ,EADgE,KACvDC,EADuD,KAEjEC,EAAWC,iBAAO,MAUxB,OACI,yBAAKnB,UAAU,SACX,2BACIY,QAZa,WAClBI,GACCE,EAASE,QAAQC,QACjBJ,GAAW,KAEXC,EAASE,QAAQE,OACjBL,GAAW,KAOPM,MAAI,EACJC,IAAKN,EACLlB,UAAU,gBACVG,IAAKY,IAET,kBAAC,EAAD,CAAalB,QAASA,EAASC,YAAaA,EAAaC,KAAMA,IAC/D,kBAAC,EAAD,CAAcM,MAAOA,EAAOC,OAAQA,EAAQC,SAAUA,MCenDkB,MArCf,WACE,OACE,yBAAKzB,UAAU,OACb,yBAAKA,UAAU,eACb,kBAAC,EAAD,CACEH,QAAQ,cACRC,YAAY,qBACZiB,IAAK,uBACLT,OAAQ,IACRC,SAAU,IACVF,MAAO,IACPN,KAAK,uBAEP,kBAAC,EAAD,CACEF,QAAQ,cACRC,YAAY,qBACZiB,IAAK,wBACLT,OAAQ,IACRC,SAAU,IACVF,MAAO,IACPN,KAAK,uBAEP,kBAAC,EAAD,CACEF,QAAQ,cACRC,YAAY,qBACZiB,IAAK,wBACLT,OAAQ,IACRC,SAAU,IACVF,MAAO,IACPN,KAAK,0BCrBK2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f7e9428.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./VideoFooter.css\"\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport Ticker from \"react-ticker\"\r\nfunction VideoFooter({channel, description, song}) {\r\n    return (\r\n        <div className=\"videoFooter\">\r\n            <div className=\"videoFooter__text\">\r\n                <h3>@{channel}</h3>\r\n                <p>{description}</p>\r\n                <div className=\"videoFooter__ticker\">\r\n                    <MusicNoteIcon className=\"videoFooter__icon\"/>\r\n                    <Ticker mode=\"smooth\">\r\n                        {({index})=>(\r\n                            <>\r\n                                <p>{song}</p>\r\n                            </>\r\n                        )}\r\n                    </Ticker>\r\n                </div>\r\n            </div>\r\n            <img \r\n                className=\"videoFooter__record\"\r\n                src=\"https://static.thenounproject.com/png/934821-200.png\"\r\n            />           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoFooter\r\n","import React, { useState } from 'react'\r\nimport \"./VideoSidebar.css\"\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nfunction VideoSidebar({likes, shares, messages}) {\r\n    const [liked, setLiked] = useState(false)\r\n    return (\r\n        <div className=\"videoSidebar\">\r\n            <div className=\"videoSidebar__button\">\r\n                {liked \r\n                ?<FavoriteIcon \r\n                    fontSize=\"large\"\r\n                    onClick={(e)=>setLiked(false)}\r\n                />\r\n                :<FavoriteBorderIcon \r\n                    fontSize=\"large\"\r\n                    onClick={(e)=>setLiked(true)}\r\n                />}\r\n                <p>{liked? likes + 1  : likes}</p>\r\n            </div>\r\n            <div className=\"videoSidebar__button\">\r\n                <MessageIcon fontSize=\"large\"/>\r\n                <p>{messages}</p>\r\n            </div>\r\n            <div className=\"videoSidebar__button\">\r\n                <ShareIcon fontSize=\"large\"/>\r\n                <p>{shares}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoSidebar\r\n","import React, { useRef, useState } from 'react'\r\nimport \"./Video.css\"\r\nimport VideoFooter from './VideoFooter'\r\nimport VideoSidebar from './VideoSidebar'\r\nfunction Video({url, channel, description, song, likes, messages, shares}) {\r\n    const [playing, setPlaying] = useState(false)\r\n    const videoRef = useRef(null)\r\n    const handleVideoPress = () => {\r\n        if(playing){\r\n            videoRef.current.pause()\r\n            setPlaying(false)\r\n        }else{\r\n            videoRef.current.play()\r\n            setPlaying(true)\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"video\">\r\n            <video\r\n                onClick={handleVideoPress}\r\n                loop\r\n                ref={videoRef}\r\n                className=\"video__player\" \r\n                src={url}\r\n            ></video>\r\n            <VideoFooter channel={channel} description={description} song={song}/>\r\n            <VideoSidebar likes={likes} shares={shares} messages={messages}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Video\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Video from './Video';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__videos\">\r\n        <Video \r\n          channel=\"facudelucia\" \r\n          description=\"Tik Tok with React\" \r\n          url={\"./assets/luchita.mp4\"}\r\n          shares={111}\r\n          messages={111}\r\n          likes={111}\r\n          song=\"Música Original\"\r\n        />\r\n        <Video \r\n          channel=\"facudelucia\" \r\n          description=\"Tik Tok with React\" \r\n          url={\"./assets/luchita2.mp4\"}\r\n          shares={111}\r\n          messages={111}\r\n          likes={111}\r\n          song=\"Música Original\"\r\n        />\r\n        <Video \r\n          channel=\"facudelucia\" \r\n          description=\"Tik Tok with React\" \r\n          url={\"./assets/luchita3.mp4\"}\r\n          shares={111}\r\n          messages={111}\r\n          likes={111}\r\n          song=\"Música Original\"\r\n        />\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}